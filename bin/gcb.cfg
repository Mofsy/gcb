# whether to keep a log
gcb_log = true

# the log level, determining which messages to log
# this is flag based; add the flag values for desired messages to get the overall log level
#   1 (2^0) - uncategorized system messages (should be enabled)
#   2 (2^1) - uncategorized error messages (should be enabled)
#   4 (2^2) - logging-related notifications
#   8 (2^3) - startup-related messages (can be disabled, since errors will be logged under 2^1)
#   16 (2^4) - unimportant system messages
#   32 (2^5) - uncategorized room messages (should be enabled)
#   64 (2^6) - uncategorized room messages (should be enabled)
#   128 (2^7) - unimportant room messages (includes many room connection messages)
#   256 (2^8) - room messages that come from the Garena server
#   512 (2^9) - room messages that come from other players
#   1024 (2^10) - debug room messages
#   2048 (2^11) - debug system messages
#   4096 (2^12) - TCP debug messages (should be disabled except for debugging)
# for example, to get everything except the debug messages, use 1023
gcb_loglevel = 1023

# whether to keep a seperate log of commands used
gcb_log_commands = true

# interval between creating a new log file; in milliseconds (prevents gcb.log from getting too large)
# set to 0 to disable
# don't set to over 2147483647
gcb_log_new_file = 86400000

# whether or not to output caught exceptions for debugging
gcb_debug = false

# path to plugins
gcb_plugin_path = plugins/

# the current Garena version
gcb_version = 0x0000027C

# hostname(s) and port(s) where GHost++ is located
#  Garena clients connecting via gcb will connect to whatever game is hosted by GHost++
#  Note that each port must be unique (for example, you cannot use 6112 on two different hostnames)
#  Also make sure that GHost++ is set to broadcast packets to the server hosting gcb (if GHost++ is on a separate machine/LAN, update it's udp_broadcasttarget configuration)
# To specify a list, do something like:
#  localhost:6112, localhost:6113, localhost:6114
gcb_tcp_host = localhost:6112

# whether to enable debug for TCP connections (will generate lots of output!)
gcb_tcp_debug = false

# whether to buffer the TCP output to GHost++ to check for name spoofing and other things
gcb_tcp_outbuffer = true

# whether to buffer the TCP output from GHost++
# this will read entire W3GS packets at a time instead of fragments
gcb_tcp_localbuffer = true

# names to reserve when connecting to GHost++
#  To specify a list, do something like:
#  gcb_tcp_reservednames = ownername, rootadminname, Open, Closed
gcb_tcp_reservednames = Open, Closed

# plugins to automatically load at startup
# You must put the fully qualified name of the plugin (includes package)
#  To specify a list, do something like:
#  gcb_plugins = gcb.examples.hello, awesome.myplugin, awesome.myplugin2
gcb_plugins = 

# the port to listen for Warcraft III game broadcasts
# you shouldn't have to change this
gcb_broadcastport = 6112

# gcb will rebroadcast packets captured from gcb_broadcastport to the following ports
#  Use if you wish to run multiple instances of gcb. gcb_broadcastport must be modified as well.
# example: gcb_rebroadcast = 6113, 6114
# gcb_rebroadcast = 

# if enabled, gcb will filter received UDP packets on gcb_broadcastport
#  Specifically, only valid W3GS_GAMEINFO packets with addr=gcb_tcp_host and port in gcb_tcp_port will be passed on
#  Note that this does not affect gcb_rebroadcast functionality (all UDP packets will be rebroadcasted)
gcb_broadcastfilter = true

# filtering IP address doesn't seem to work very well for local address; filter anyway?
gcb_broadcastfilter_ip = false

# if enabled, gcb will create a random entry key to send to Garena users
#  This way, the actual LAN entry key will be invisible to them
gcb_broadcastfilter_key = true

# if enabled, gcb will cache UDP packets
#  This saves bandwidth because we only send these packets when user requests through SEARCHGAME packet
#  Note: gcb_broadcastfilter_key must be enabled for this to work because of implementation
gcb_broadcastfilter_cache = true

# if set, this will be used to rewrite the gamename taken from the host bot
#  You can use %g to represent the original gamename
#  For example:
#   gcb_broadcastfilter_gamename = [GARENA] %g
# This will rewrite "Gamename" into "[GARENA] Gamename"
gcb_broadcastfilter_gamename =

# how often to reconnect to Garena (in minutes)
#  Might be necessary if running gcb for extended periods of time
# set to 0 to disable
gcb_reconnect_interval = 10

# whether to only reconnect if idle state is detected
gcb_reconnect_idleonly = true

# interval in seconds to display the STATUS message
gcb_status = 60

# whether to display member information while gcb is running
#  if enabled, gcb will output to room_users_{id}.txt, where {id} is the connection identifier
#  output includes user id, username, country, experience, IP address, etc.
gcb_display_members = false

# whether to enable GCBI protocol
#  GCBI sends information about the joining Garena user to GHost++
#  Requires a patch in GHost++, however (gcbi-extend-v2.patch)
gcb_enablegcbi = false

# use command line interface
gcb_bot_commandline = false

###################
# GARENA SETTINGS #
###################

# your Garena username and password
# if set, this overrides the connection-specific username/password settings
garena_username = garena
garena_password = garena

# Garena username for this connection (if global garena_username/password are not set)
#garena1_username = garena

# Garena password for this connection (if global garena_username/password is not set)
#garena1_password = garena

# the main host (login server) to use
garena1_mainhost = con3.garenaconnect.com

# the room gcb should join (if gcb_roomid and gcb_roomhost are not set)
#  note that not set means the option must be commented out
#  you should use gcb_roomid and gcb_roomhost if at all possible
#  also, using gcb_roomname may not work if there is more than room with that name
# garena1_roomname = 

# the room ID gcb should join
#  See README for details on how to find this.
garena1_roomid = 

# the room host for gcb_roomid
#  See README for details on how to find this.
garena1_roomhost = 

# the room password; leave uncommented or blank to not set one
# garena1_roompassword =

# the GP2PP port
#  each Garena connection should use a different port
#  in some cases you might have to forward this port (UDP) on router
#  the Garena client attempts to use 1513 if possible
# if it is set to 0, then the port will be chosen automatically
#  it is recommended to do this if you're using the exit nicely feature
garena1_peerport = 0


####################
#   TCP SETTINGS   #
####################

### The options below control the properties of gcb's
###  virtual TCP over UDP connection algorithm. Tweaking
###  them is not recommended for normal users because
###  the defaults should give optimal performance.
###  However, on some systems or configurations, other
###  values might be better.
### Times are all set in milliseconds for this section.

# the maximum number of packets to buffer before we stop sending packets
# packets are only removed from the buffer when they are acknowledged by the remote end
# 0 disables this function
# a larger value is recommended if there is a greater ping
gcb_tcp_maxbufferedpackets = 20

# Delay in milliseconds for standard retransmission of packets
#  If an acknowledgement packet is not sent for this delay, then the packet will be retransmitted
#  Note that gcb will dynamically determine the actual standard retransmission delay, this is only the initial value
gcb_tcp_standarddelay = 3000

# timeout on packets sent from local connection until we do standard retransmission
# this isn't too important anymore since we also standard retransmit every gcb_tcp_srttg milliseconds
gcb_tcp_sotimeout = 1000

# the alpha value used to calculate smoothed round trip time
# a higher value will change more quickly to new round trip time calculations
gcb_tcp_srttalpha = 0.125

# the beta value used to calculate smoothed round trip time
# this has same function as alpha, but for the _variation_ in the SRTT
gcb_tcp_srttbeta = 0.25

# the minimim round trip time (milliseconds)
gcb_tcp_srttlower = 10

# the maximum round trip time (milliseconds)
gcb_tcp_srttupper = 60000

# the clock granularity (milliseconds)
# this is also how often we will check for standard retransmission of packets
#  Note that we still check at other times.
gcb_tcp_srttg = 20

# the K value, should be 4
gcb_tcp_srttk = 4

# maximum size of UDP packets to send
# packets larger than this will be broken into small chunks
gcb_tcp_maxpacketsize = 512

# maximum size of TCP packets to receive from local/remote
# packets larger than this will be rejected
gcb_tcp_maxtcpsize = 2000


#################
# RCON SETTINGS #
#################

# whether to enable rcon or not
#  rcon allows you to send commands to gcb via sockets
#  for example, to exit gcb nicely
gcb_rcon = false

# the rcon password
# this MUST be set, otherwise rcon will reject all connections
rcon_password =

# rcon bind address
rcon_bind = 0.0.0.0

# rcon server port
rcon_port = 7464

# if gcb rcon should only accept local connections (recommended)
rcon_localonly = true


####################
# REVERSE SETTINGS #
####################

# whether to enable REVERSE or not
#  REVERSE changes the function of gcb so that you can join other Garena client's games
#  This should help with playing over Garena on unsupported systems, such as Linux
#  It functions quite similarly to GProxy++, although currently support for reconnection is not planned
#  Note that gcb is incompatible with REVERSE, so this will automatically disable gcb; gcb_bot can still be enabled
gcb_reverse = false

# your Warcraft III version; Garena seems to change the war3version, so gcb changes it back
#  For example, if your room uses 1.24d, write
#   gcb_reverse_war3version = 24
gcb_reverse_war3version = 26

# the starting port to host local games on, or 0 to use any free ports
#  gcb hosts games on LAN
#  Once you connect to the game, gcb will route packets between you and the Garena remote server
#  Note that one port for each LAN game is necessary (see gcb_reverse_num for more details)
gcb_reverse_port = 0

# the number of LAN games to host
#  gcb will create this many server sockets
#  Every time gcb receives a GAMEINFO broadcast, it will host on the next available server
#  The ports start at gcb_reverse_port and go up from there
#  If gcb_reverse_port = 16000 and gcb_reverse_num = 25, then the last port will be 16024
gcb_reverse_num = 25

# the hostname to send UDP packets received from Garena to
#  For example, if you want to use Warcraft III only on your own computer, then set
#   gcb_reverse_target = 127.0.0.1
#  If you want the entire LAN to receive broadcast packets from this gcb, then set
#   gcb_reverse_target = 255.255.255.255
gcb_reverse_target = 127.0.0.1

####################
# LAN FIX SETTINGS #
####################

# whether to enable LAN FIX or not
# LAN FIX is necessary if you wish to communicate with Garena clients on the same LAN as you
# LAN FIX is only intended for testing purposes; LAN Garena clients can connect to GHost++ over LAN instead of through gcb
#  Note that if LAN FIX is on, game names to all users will be renamed and will contain a 'w'
#  This is to differentiate for LAN users between joining the LAN game and joining through gcb
gcb_lanfix = false

# the Garena username of the LAN Garena client
gcb_lanfix_username = garena

# the internal IP address of the LAN Garena client
gcb_lanfix_ip = 192.168.1.2

# the GP2PP port of the LAN Garena client
gcb_lanfix_port = 1513

################
# BOT SETTINGS #
################

# whether to run gcb_bot
# if set to true, gcb_bot will run
gcb_bot = false

# whether to disable gcb (only if gcb_bot is enabled)
gcb_bot_disable = true

# whether you have channel admin
# disables commands and features that require channel admin access if false
gcb_bot_channel_admin = false

# whether to ban user from room when using ban command; only works if you also have channel admin
gcb_bot_room_ban = false

# whether to unban user from room when using unban command; only works if you also have channel admin
gcb_bot_room_unban = false

# any string representing this bot's owner or organization
gcb_bot_owner = 

# root admin; leave blank to disable root
gcb_bot_root = 

# the bot trigger
gcb_bot_trigger = .

# time in milliseconds to wait after a chat message is sent, before sending another message
gcb_bot_delay = 500

# time in milliseconds a public user must wait before bot will respond to another command
gcb_bot_publicdelay = 3000

# realm; only used in GHost++ and GHostOne databases
gcb_bot_realm = 

# GHost++ botid to target; only used in GHost++ extended databases
gcb_bot_id = 0

# what to do when banned word/phrase is detected
# 0 = nothing, 1 = warn, 2 = kick, 3 = ban
gcb_bot_detect = 0

# if gcb_bot_detect is 3, how many days to ban for
gcb_bot_detect_ban_length = 999

# announcement when banned word/phrase is detected; only if gcb_bot_detect is true
gcb_bot_detect_announcement = Banned word/phrase detected

# message to display when a user does not have access to a command; leave blank to disable this functionality
gcb_bot_access_message = You do not have access to this command

# message to send to public user when they join the room
gcb_bot_welcome_message = Welcome

# whether to allow public commands
gcb_bot_publiccommands = true

# whether to have announcements when a ranked user enters the room
gcb_bot_user_join_announcement = false

# whether to whisper a message to a public user when they join the room
gcb_bot_public_join_message = false

# any string representing current DotA version used in the room
gcb_bot_dota_version = 6.72f

# any string representing current Warcraft 3 version used in the room
gcb_bot_warcraft_version = 1.24e / 1.24.4.6387

# show user's IP address in whoami/whois
gcb_bot_showip = false

# interval between each automatic message in seconds; will only be used if there is at least 1 message
# set to 0 to disable this feature
gcb_bot_auto_ann_interval = 120

# kick players out of the room if they are not within level range or are safelist rank or higher
gcb_bot_entry_level = false

# level range for players entering room, only if gcb_bot_entry_level is set to true
gcb_bot_min_level = 10
gcb_bot_max_level = 60

# whether to check if players are bypassing flood protection i.e. using cracked garena
gcb_bot_check_same_message = false

# whether to enable trivia plugin command aliases
gcb_bot_trivia_plugin_alias = true

# command aliases
gcb_bot_alias_commands = commands, command, cmd, cmds, c
gcb_bot_alias_addadmin = addadmin, aa, adda
gcb_bot_alias_addexaminer = addexaminer, ae, adde
gcb_bot_alias_addvip = addvip, av, addv
gcb_bot_alias_addsafelist = addsafelist, as, adds
gcb_bot_alias_ban = ban, b
gcb_bot_alias_roomban = roomban, rb
gcb_bot_alias_botban = botban, bb
gcb_bot_alias_unban = unban, ub
gcb_bot_alias_kick = kick, k
gcb_bot_alias_quickick = quickkick, qk
gcb_bot_alias_addautoannounce = addautoannounce, aaa
gcb_bot_alias_delautoannounce = delautoannounce, daa
gcb_bot_alias_setautoannounceinterval = setautoannounceinterval, saai
gcb_bot_alias_announce = announce, ann
gcb_bot_alias_say = say, s
gcb_bot_alias_whisper = whisper, w
gcb_bot_alias_clear = clear, c
gcb_bot_alias_promote = promote, p
gcb_bot_alias_demote = demote, d
gcb_bot_alias_findip = findip, fip
gcb_bot_alias_version = version, v
gcb_bot_alias_uptime = uptime, ut, upt
gcb_bot_alias_roomstats = roomstats, roomstat, rs
gcb_bot_alias_banword = banword, bw
gcb_bot_alias_unbanword = unbanword, ubw
gcb_bot_alias_allstaff = allstaff, alls
gcb_bot_alias_staff = staff, staf, stf, st
gcb_bot_alias_mute = mute, m
gcb_bot_alias_unmute = unmute, um
gcb_bot_alias_random = random, r
gcb_bot_alias_traceuser = traceuser, tu
gcb_bot_alias_traceip = traceip, tip
gcb_bot_alias_checkuserip = checkuserip, cui, cuip
gcb_bot_alias_creater = creater, creator
gcb_bot_alias_getpromote = getpromote, getpromotes, gp
gcb_bot_alias_status = status, stat
gcb_bot_alias_getunban = getunban, getunbans, gub
gcb_bot_alias_baninfo = baninfo, bi
gcb_bot_alias_kickinfo = kickinfo, ki
gcb_bot_alias_help = help, h
gcb_bot_alias_whoiisuid = whoisuid, whouid, wuid, wid, finduid
gcb_bot_alias_multiban = multiban, mban, mb

gcb_bot_alias_trivia on = trivia on, t on
gcb_bot_alias_trivia off = trivia off, t off
gcb_bot_alias_delay = delay, del, dly, dl
gcb_bot_alias_category = category, cat, ca
gcb_bot_alias_difficulty = difficulty, dif, diff
gcb_bot_alias_top = top, tp
gcb_bot_alias_score = score, sc

#####################
# BOT SPAM SETTINGS #
#####################

# whether to check if a user is spamming
gcb_bot_spam = false

# how many new lines (enter key) the user can have per message without receiving a warning
gcb_bot_spam_warn_lines = 5

# number of new lines (enter key) the user can have per message without being autokicked
gcb_bot_spam_max_lines = 15

# how many equality signs ('<' and '>') the user can have per message without receiving a warning
gcb_bot_spam_warn_equality = 16

# number of equality signs ('<' and '>') the user can have per message without being autokicked
gcb_bot_spam_max_equality = 40

# number of warnings for the user to be kicked; can not be set to less than 3
gcb_bot_spam_kick = 5

#########################
# BOT DATABASE SETTINGS #
#########################

# interval between synchronising MySQL database and bot in seconds
gcb_bot_refresh_rate = 60

# gcb_bot database settings
#  login information
gcb_bot_db_username = myusername
gcb_bot_db_password = mypassword

#  JDBC hostname
#   Format should be: jdbc:mysql://hostname/databasename
gcb_bot_db_host = jdbc:mysql://localhost/gcb

# database type
#  gcb: database created by gcb install.sql script
#  ghostone: GHostOne database
#  ghost++: GHost++ database (will not support safelist)
#  ghost_extended: GHost++ database with safelist table and commands through MySQL modification
gcb_bot_db_type = gcb
